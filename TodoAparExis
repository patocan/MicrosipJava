/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Apariencia;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author PC-Patricio
 */
public class AparExis extends javax.swing.JFrame {

    /**
     * Creates new form AparExis
     */
    public AparExis() {
        initComponents();
        
        //codigo botton group
        gbtnfornomfor.add(check);
        gbtnfornomfor.add(check1);
        gbtnfornomfor.add(check2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        gbtnfornomfor = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        campo2 = new javax.swing.JTextField();
        check = new javax.swing.JRadioButton();
        check1 = new javax.swing.JRadioButton();
        check2 = new javax.swing.JRadioButton();
        BotonCatalogo = new javax.swing.JButton();
        BotonPbas = new javax.swing.JButton();
        BotonSoc = new javax.swing.JButton();
        BotonETL = new javax.swing.JButton();
        Export = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        BtnMari = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        BuscT = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        ventas = new javax.swing.JMenu();
        Compras = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        check.setText("Formula");

        check1.setText("Nombre");

        check2.setText("Todo");

        BotonCatalogo.setText("Catalogo");
        BotonCatalogo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCatalogoActionPerformed(evt);
            }
        });

        BotonPbas.setText("Pruebas");
        BotonPbas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonPbasActionPerformed(evt);
            }
        });

        BotonSoc.setText("Sociedad");
        BotonSoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSocActionPerformed(evt);
            }
        });

        BotonETL.setText("ETL");
        BotonETL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonETLActionPerformed(evt);
            }
        });

        Export.setText("ExporTabl");
        Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Linea", "Nombre", "Formula", "Precio"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        BtnMari.setText("Marissa");
        BtnMari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnMariActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Linea", "Clave", "Nombre", "Formula", "Precio", "Lote", "Caducidad", "Existencia", "Almacen"
            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(jTable2);
        Alinear.setHorizontalAlignment(SwingConstants.RIGHT);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable2.setDefaultRenderer(Object.class, new MiRender2(6));
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(300);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(400);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(80);
            jTable2.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTable2.getColumnModel().getColumn(6).setPreferredWidth(100);
            jTable2.getColumnModel().getColumn(7).setPreferredWidth(50);
            jTable2.getColumnModel().getColumn(8).setPreferredWidth(150);
        }

        BuscT.setText("BuscTodo");
        BuscT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BuscTMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(BtnMari, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BotonPbas, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BotonSoc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                        .addComponent(Export, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BotonETL, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campo2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BuscT))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(check2)
                            .addComponent(check1)
                            .addComponent(check))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(BotonCatalogo, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(202, 202, 202))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(campo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BuscT))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(check)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(check1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(check2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(BtnMari, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonETL, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonSoc, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonPbas, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(Export, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(BotonCatalogo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(141, 141, 141))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))))
        );

        jMenu1.setText("Menu");

        ventas.setText("Ventas");
        ventas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ventasMouseClicked(evt);
            }
        });
        jMenu1.add(ventas);

        Compras.setText("Compras");
        Compras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ComprasMouseClicked(evt);
            }
        });
        jMenu1.add(Compras);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>                        

    private void BotonETLActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        limpiar_tabla();
        mostrarRegistros();
    }                                        

    private void BotonSocActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        limpiar_tabla();
        mostrarRegistrossoc();
    }                                        

    private void BotonPbasActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        limpiar_tabla();
        mostrarRegistrospbas();
    }                                         

    private void BotonCatalogoActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        mostrarCatalogo();
    }                                             

    private void ExportActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        exporterfile();
    }                                      

    private void BtnMariActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        limpiar_tabla();
        mostrarRegistrosMari();
    }                                       

    private void ventasMouseClicked(java.awt.event.MouseEvent evt) {                                    
        // JMenu abrir ventana ventas

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AparVentas().setVisible(true);
            }
        });
        
    }                                   

    private void ComprasMouseClicked(java.awt.event.MouseEvent evt) {                                     
        // Abrir Ventana Compras
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AparCompras().setVisible(true);
            }
        });
    }                                    

    private void BuscTMouseClicked(java.awt.event.MouseEvent evt) {                                   
        // TODO add your handling code here:
        limpiar_tabla();
        mostrarRegistrosMari();
        mostrarRegistrossoc();
        mostrarRegistrospbas();
        mostrarCatalogo();
    }                                  

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AparExis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AparExis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AparExis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AparExis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton BotonCatalogo;
    private javax.swing.JButton BotonETL;
    private javax.swing.JButton BotonPbas;
    private javax.swing.JButton BotonSoc;
    private javax.swing.JButton BtnMari;
    private javax.swing.JButton BuscT;
    private javax.swing.JMenu Compras;
    private javax.swing.JButton Export;
    private javax.swing.JTextField campo2;
    private javax.swing.JRadioButton check;
    private javax.swing.JRadioButton check1;
    private javax.swing.JRadioButton check2;
    private javax.swing.ButtonGroup gbtnfornomfor;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JMenu ventas;
    // End of variables declaration                   
  
  PreparedStatement ps;
  ResultSet rs;
  ResultSetMetaData rsm;
  DefaultTableModel dtm;  
    
  private String db=    "D:/Microsip Datos/etrueba.fdb";
  private String dbmarissa= "D:/Microsip Datos/marissa.fdb";
  private String dbpbas="D:/Microsip Datos/pruebas.fdb";
  private String dbsoc= "D:/Microsip Datos/sociedad.fdb";
  private String user = "JAVA";
  private String password = "demo";
  private String server="jdbc:firebirdsql:192.168.10.100/3050:";
  DefaultTableCellRenderer Alinear = new DefaultTableCellRenderer();
  
  
  
  public void mostrarRegistrosMari(){ //MARISSA
      
      
      String busq=campo2.getText();
      
      if(campo2.getText().equalsIgnoreCase("")){
          JOptionPane.showMessageDialog(null,"Ingrese busqueda","Error",JOptionPane.ERROR_MESSAGE);
      }
      
      else if (check.isSelected()){ /////por formula marissa
          
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbmarissa,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    
    
    ps=conexion.prepareStatement("select a.nombre_linea, a.clave_articulo, a.nombre_articulo, f.formula, cast(p.precio as numeric(6,2)), l.clave, coalesce(l.fecha, '5000-12-31'), cast(l.existencia as Integer), s.nombre, a.articulo_id " +
"  from lista_arts_discretos('L','E','19','01/01/2011', 'Now',0,null) L" +
"   join orsp_lista_articulos('S','S') A"+  
"   join libres_articulos f"+  
"   join precios_articulos p"+  
"   join almacenes s"+  
"   on a.articulo_id=l.articulo_id"+
"   on f.articulo_id=a.articulo_id"+
"   on p.articulo_id=a.articulo_id"+
"   on l.almacen_id=s.almacen_id"+
"   where a.nombre_articulo containing '"+busq+"'"+            
"   or f.formula containing '"+busq+"'"+
"   and l.existencia > 0"+
"   union all"+
"   select a.nombre_linea, a.clave_articulo, a.nombre_articulo, f.formula, cast(p.precio as numeric(6,2)), coalesce('', '5000-12-31'),'', cast(e.existencia as Integer), '', a.articulo_id"+
"   from  orsp_lista_articulos('S','S') A"+
"   left join exival_art(a.articulo_id,19,'Now','S') E"+
"   left join libres_articulos f"+
"   left join precios_articulos p"+            
"   on e.articulo_id=a.articulo_id"+
"   on a.articulo_id=f.articulo_id"+           
"   on a.articulo_id=p.articulo_id"+           
"   join articulos AR"+           
"   on Ar.articulo_id=a.articulo_id and ar.seguimiento='N'"+
"   where a.nombre_articulo containing '"+busq+"'"+
"   and e.existencia > 0"+           
"   order by 2" );
    
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd ETL");
     
     }  catch (SQLException ex) {   
         
         System.out.println(ex);
         
        } catch (ClassNotFoundException ex) {
          
        } 
     }
      else if (check1.isSelected()){ // por nombre MARISA
      
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbmarissa,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula,cast(precios_articulos.precio as numeric(6,2)),articulos_discretos.clave, coalesce(articulos_discretos.fecha, '5000-12-31'), cast(exis_discretos.existencia as Integer), almacenes.nombre " +
"  from articulos" +
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+  

"   inner join articulos_discretos on (articulos.articulo_id = articulos_discretos.articulo_id)"+           
"   inner join exis_discretos on (articulos_discretos.art_discreto_id = exis_discretos.art_discreto_id)"+           
"   inner join almacenes on (exis_discretos.almacen_id = almacenes.almacen_id)"+           
"   inner join precios_articulos on (articulos.articulo_id = precios_articulos.articulo_id)"+
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
           
"   WHERE articulos.nombre CONTAINING '"+busq+"' AND exis_discretos.existencia >=1 AND almacenes.nombre='ALMACEN PRINCIPAL' ");
    
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }   
     
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd MARISA");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        } 
        
    }                                         
      
      else if (check2.isSelected()){ // todo MARISA
      
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbmarissa,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula,cast(precios_articulos.precio as numeric(6,2)),articulos_discretos.clave, coalesce(articulos_discretos.fecha, '5000-12-31'), cast(exis_discretos.existencia as Integer), almacenes.nombre " +
"  from articulos" +
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+  

"   inner join articulos_discretos on (articulos.articulo_id = articulos_discretos.articulo_id)"+           
"   inner join exis_discretos on (articulos_discretos.art_discreto_id = exis_discretos.art_discreto_id)"+           
"   inner join almacenes on (exis_discretos.almacen_id = almacenes.almacen_id)"+           
"   inner join precios_articulos on (articulos.articulo_id = precios_articulos.articulo_id)"+
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
           
"   WHERE exis_discretos.existencia >=1 AND almacenes.nombre='ALMACEN PRINCIPAL'");
    
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd SOC");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        }   
    }                   
      
  }  
  
  
  
  
  

public void mostrarRegistros(){ //ETLLLLLL
      
      
      String busq=campo2.getText();
      
      if(campo2.getText().equalsIgnoreCase("")){
          JOptionPane.showMessageDialog(null,"Ingrese busqueda","Error",JOptionPane.ERROR_MESSAGE);
      }
      
      else
     
      if (check.isSelected()){ /////por formula ETL
          
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ db,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula,cast(precios_articulos.precio as numeric(6,2)),articulos_discretos.clave, coalesce(articulos_discretos.fecha, '5000-12-31'), cast(exis_discretos.existencia as Integer), almacenes.nombre " +
"  from articulos" +
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+  

"   inner join articulos_discretos on (articulos.articulo_id = articulos_discretos.articulo_id)"+           
"   inner join exis_discretos on (articulos_discretos.art_discreto_id = exis_discretos.art_discreto_id)"+           
"   inner join almacenes on (exis_discretos.almacen_id = almacenes.almacen_id)"+           
"   inner join precios_articulos on (articulos.articulo_id = precios_articulos.articulo_id)"+
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
           
"   WHERE libres_articulos.formula CONTAINING '"+busq+"' AND (almacenes.nombre='ALMACEN FISICO' OR almacenes.nombre='CAJAS CERRADAS'OR almacenes.nombre='ESTROPEADOS O EN MAL ESTADO') AND exis_discretos.existencia >=1 " );
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd ETL");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        } 
     }
      else if (check1.isSelected()){ // por nombre ETL
      
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ db,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula,cast(precios_articulos.precio as numeric(6,2)),articulos_discretos.clave, coalesce(articulos_discretos.fecha, '5000-12-31'), cast(exis_discretos.existencia as Integer), almacenes.nombre " +
"  from articulos" +
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+  

"   inner join articulos_discretos on (articulos.articulo_id = articulos_discretos.articulo_id)"+           
"   inner join exis_discretos on (articulos_discretos.art_discreto_id = exis_discretos.art_discreto_id)"+           
"   inner join almacenes on (exis_discretos.almacen_id = almacenes.almacen_id)"+           
"   inner join precios_articulos on (articulos.articulo_id = precios_articulos.articulo_id)"+
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
           
"   WHERE articulos.nombre CONTAINING '"+busq+"' AND (almacenes.nombre='ALMACEN FISICO' OR almacenes.nombre='CAJAS CERRADAS'OR almacenes.nombre='ESTROPEADOS O EN MAL ESTADO') AND exis_discretos.existencia >=1 ");
    
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd ETL");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        } 
        
    }                                         
      
      else if (check2.isSelected()){ // todo ETL
      
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ db,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula,cast(precios_articulos.precio as numeric (6,2)),articulos_discretos.clave, coalesce(articulos_discretos.fecha, '5000-12-31'), cast(exis_discretos.existencia as Integer), almacenes.nombre " +
"  from articulos" +
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+  

"   inner join articulos_discretos on (articulos.articulo_id = articulos_discretos.articulo_id)"+           
"   inner join exis_discretos on (articulos_discretos.art_discreto_id = exis_discretos.art_discreto_id)"+           
"   inner join almacenes on (exis_discretos.almacen_id = almacenes.almacen_id)"+           
"   inner join precios_articulos on (articulos.articulo_id = precios_articulos.articulo_id)"+
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
           
"   WHERE exis_discretos.existencia >=1 AND (almacenes.nombre='ALMACEN FISICO' OR almacenes.nombre='CAJAS CERRADAS'OR almacenes.nombre='ESTROPEADOS O EN MAL ESTADO')");
    
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd ETL");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        }   
    }                   
      
  }


public void mostrarRegistrossoc(){ //S O C C
      
      
      String busq=campo2.getText();
      
      if(campo2.getText().equalsIgnoreCase("")){
          JOptionPane.showMessageDialog(null,"Ingrese busqueda","Error",JOptionPane.ERROR_MESSAGE);
      }
      
      else
     
      if (check.isSelected()){ /////por formula SOC
          
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbsoc,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula,cast(precios_articulos.precio as numeric(6,2)),articulos_discretos.clave, coalesce(articulos_discretos.fecha, '5000-12-31'), cast(exis_discretos.existencia as Integer), almacenes.nombre " +
"  from articulos" +
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+  

"   inner join articulos_discretos on (articulos.articulo_id = articulos_discretos.articulo_id)"+           
"   inner join exis_discretos on (articulos_discretos.art_discreto_id = exis_discretos.art_discreto_id)"+           
"   inner join almacenes on (exis_discretos.almacen_id = almacenes.almacen_id)"+           
"   inner join precios_articulos on (articulos.articulo_id = precios_articulos.articulo_id)"+
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
           
"   WHERE libres_articulos.formula CONTAINING '"+busq+"' AND almacenes.nombre='Almacen general' AND exis_discretos.existencia >=1 " );
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd SOC");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        } 
     }
      else if (check1.isSelected()){ // por nombre SOC
      
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbsoc,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula,cast(precios_articulos.precio as numeric(6,2)),articulos_discretos.clave, coalesce(articulos_discretos.fecha, '5000-12-31'), cast(exis_discretos.existencia as Integer), almacenes.nombre " +
"  from articulos" +
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+  

"   inner join articulos_discretos on (articulos.articulo_id = articulos_discretos.articulo_id)"+           
"   inner join exis_discretos on (articulos_discretos.art_discreto_id = exis_discretos.art_discreto_id)"+           
"   inner join almacenes on (exis_discretos.almacen_id = almacenes.almacen_id)"+           
"   inner join precios_articulos on (articulos.articulo_id = precios_articulos.articulo_id)"+
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
           
"   WHERE articulos.nombre CONTAINING '"+busq+"' AND almacenes.nombre='Almacen general' AND exis_discretos.existencia >=1");
    
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd SOC");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        } 
        
    }                                         
      
      else if (check2.isSelected()){ // todo SOC
      
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbsoc,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula,cast(precios_articulos.precio as numeric (6,2)),articulos_discretos.clave, coalesce(articulos_discretos.fecha, '5000-12-31'), cast(exis_discretos.existencia as integer), almacenes.nombre " +
"  from articulos" +
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+  

"   inner join articulos_discretos on (articulos.articulo_id = articulos_discretos.articulo_id)"+           
"   inner join exis_discretos on (articulos_discretos.art_discreto_id = exis_discretos.art_discreto_id)"+           
"   inner join almacenes on (exis_discretos.almacen_id = almacenes.almacen_id)"+           
"   inner join precios_articulos on (articulos.articulo_id = precios_articulos.articulo_id)"+
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
           
"   WHERE almacenes.nombre='Almacen general' and exis_discretos.existencia >=1");
    
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd SOC");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        }   
    }                   
      
  }


public void mostrarRegistrospbas(){ //PRUEBAS
     
      
      String busq=campo2.getText();
      
      if(campo2.getText().equalsIgnoreCase("")){
          JOptionPane.showMessageDialog(null,"Ingrese busqueda","Error",JOptionPane.ERROR_MESSAGE);
      }
      
      else
     
      if (check.isSelected()){ /////por formula PBAS
          
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbpbas,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula,cast(precios_articulos.precio as numeric(6,2)),articulos_discretos.clave, coalesce(articulos_discretos.fecha, '5000-12-31'), cast(exis_discretos.existencia as Integer), almacenes.nombre " +
"  from articulos" +
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+  

"   inner join articulos_discretos on (articulos.articulo_id = articulos_discretos.articulo_id)"+           
"   inner join exis_discretos on (articulos_discretos.art_discreto_id = exis_discretos.art_discreto_id)"+           
"   inner join almacenes on (exis_discretos.almacen_id = almacenes.almacen_id)"+           
"   inner join precios_articulos on (articulos.articulo_id = precios_articulos.articulo_id)"+
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
           
"   WHERE libres_articulos.formula CONTAINING '"+busq+"' AND (almacenes.nombre='ALMACEN FISICO PRUEBAS' OR almacenes.nombre='CAJAS CERRADAS'OR almacenes.nombre='ESTROPEADOS O EN MAL ESTADO') AND exis_discretos.existencia >=1 " );
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd PBAS");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        } 
     }
      else if (check1.isSelected()){ // por nombre PBAS
      
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbpbas,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula,cast(precios_articulos.precio as numeric(6,2)),articulos_discretos.clave, coalesce(articulos_discretos.fecha, '5000-12-31'), cast(exis_discretos.existencia as Integer), almacenes.nombre " +
"  from articulos" +
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+  

"   inner join articulos_discretos on (articulos.articulo_id = articulos_discretos.articulo_id)"+           
"   inner join exis_discretos on (articulos_discretos.art_discreto_id = exis_discretos.art_discreto_id)"+           
"   inner join almacenes on (exis_discretos.almacen_id = almacenes.almacen_id)"+           
"   inner join precios_articulos on (articulos.articulo_id = precios_articulos.articulo_id)"+
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
           
"   WHERE articulos.nombre CONTAINING '"+busq+"' AND (almacenes.nombre='ALMACEN FISICO PRUEBAS' OR almacenes.nombre='CAJAS CERRADAS'OR almacenes.nombre='ESTROPEADOS O EN MAL ESTADO') AND exis_discretos.existencia >=1 ");
    
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd PBAS");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        } 
        
    }                                         
      
      else if (check2.isSelected()){ // todo PBAS
      
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbpbas,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula,cast(precios_articulos.precio as numeric(6,2)),articulos_discretos.clave, coalesce(articulos_discretos.fecha, '5000-12-31'), cast(exis_discretos.existencia as Integer), almacenes.nombre " +
"  from articulos" +
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+  

"   inner join articulos_discretos on (articulos.articulo_id = articulos_discretos.articulo_id)"+           
"   inner join exis_discretos on (articulos_discretos.art_discreto_id = exis_discretos.art_discreto_id)"+           
"   inner join almacenes on (exis_discretos.almacen_id = almacenes.almacen_id)"+           
"   inner join precios_articulos on (articulos.articulo_id = precios_articulos.articulo_id)"+
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
           
"   WHERE exis_discretos.existencia >=1 AND (almacenes.nombre='ALMACEN FISICO PRUEBAS' OR almacenes.nombre='CAJAS CERRADAS'OR almacenes.nombre='ESTROPEADOS O EN MAL ESTADO')");
    
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
    } 
        dtm=(DefaultTableModel)this.jTable2.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenar();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd PBAS");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        }   
    }                   
      
  }

public void mostrarCatalogo(){ //Todo Catalogo
      limpiar_tablaCat();
      
      String busq=campo2.getText();
      
      if(campo2.getText().equalsIgnoreCase("")){
          JOptionPane.showMessageDialog(null,"Ingrese busqueda","Error",JOptionPane.ERROR_MESSAGE);
      }
      
      else
     
      if (check.isSelected()){ /////por formula Catalogo
          
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbsoc,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula, cast(precios_articulos.precio as numeric(6,2))" +
"   from precios_articulos" +
"   inner join articulos on (precios_articulos.articulo_id = articulos.articulo_id)"+

"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+           
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
            
"   WHERE libres_articulos.formula CONTAINING '"+busq+"'");
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
          
    } 
        dtm=(DefaultTableModel)this.jTable1.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenarCat();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd CATALOGO");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        } 
     }
      else if (check1.isSelected()){ // por nombre CATALOGO
      
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbsoc,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula, precios_articulos.precio" +
"   from precios_articulos" +
"   inner join articulos on (precios_articulos.articulo_id = articulos.articulo_id)"+  

"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+           
"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)"+
            
"   WHERE articulos.nombre CONTAINING '"+busq+"'");
    
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
    } 
        dtm=(DefaultTableModel)this.jTable1.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenarCat();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd CATALOGO");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        } 
        
    }                                         
      
      else if (check2.isSelected()){ // todo CATALOGO
      
      try{
            
    Class.forName("org.firebirdsql.jdbc.FBDriver");
    Connection conexion = DriverManager.getConnection(server+ dbsoc,this.user, this.password);
    System.out.println("conectando a la Base de Datos");
    ps=conexion.prepareStatement("select lineas_articulos.nombre, articulos.nombre, libres_articulos.formula, precios_articulos.precio" +
"   from precios_articulos" +
"   inner join articulos on (precios_articulos.articulo_id = articulos.articulo_id)"+  
"   inner join libres_articulos on (articulos.articulo_id = libres_articulos.articulo_id)"+           

"   inner join lineas_articulos on (articulos.linea_articulo_id = lineas_articulos.linea_articulo_id)");
    
     
     rs=ps.executeQuery();
     rsm=rs.getMetaData();
     
     ArrayList<Object[]> data = new ArrayList<>();
     
     while(rs.next()){
          
          Object[] rows = new Object[rsm.getColumnCount()];
           for (int i=0;i<rows.length;i++){
               rows[i]=rs.getObject(i+1);
           }
          data.add(rows);
          
    } 
        dtm=(DefaultTableModel)this.jTable1.getModel();
     for(int i=0;i<data.size();i++){
         dtm.addRow(data.get(i));
         ordenarCat();
     }    
     rs.close();
     conexion.close();
     System.out.println("desconectando de la bd ETL");
     
     }  catch (SQLException ex) {   
        } catch (ClassNotFoundException ex) {
        }   
    }                   
      
  }





public void limpiar_tabla(){
   try{
     dtm = (DefaultTableModel) jTable2.getModel();
     for(int i=0;i<dtm.getRowCount();i++){
     dtm.removeRow(i);
     i-=1;
    }
        }catch(Exception e){
            System.out.println(e);
        }
  }

public void limpiar_tablaCat(){
   try{
     dtm = (DefaultTableModel) jTable1.getModel();
     for(int i=0;i<dtm.getRowCount();i++){
     dtm.removeRow(i);
     i-=1;
    }
        }catch(Exception e){
            System.out.println(e);
        }
  }
public void ordenar(){     
      jTable2.setModel(dtm);
      TableRowSorter<TableModel>elQueOrdena=new TableRowSorter<TableModel>(dtm);
      jTable2.setRowSorter(elQueOrdena);
 }

public void ordenarCat(){     
      jTable1.setModel(dtm);
      TableRowSorter<TableModel>elQueOrdena=new TableRowSorter<TableModel>(dtm);
      jTable1.setRowSorter(elQueOrdena);
 }

//Exportar a exel
public void exporterfile(){
      
      
      if (this.jTable2.getRowCount()==0){
      JOptionPane.showMessageDialog(null,"No hay datos en la Tabla","Error ",JOptionPane.INFORMATION_MESSAGE);
      this.jTable2.grabFocus();
      return;
  }
      JFileChooser chooser=new JFileChooser();
      
      FileNameExtensionFilter filter=new FileNameExtensionFilter("Archivo de Exel","xls");

      chooser.setFileFilter(filter);
      
      
      chooser.setDialogTitle("Guardar archivo");
      chooser.setMultiSelectionEnabled(false);
      chooser.setAcceptAllFileFilterUsed(false);
      if (chooser.showSaveDialog(null)==JFileChooser.APPROVE_OPTION){
          List<JTable> tb=new ArrayList<>();
       List<String>nom=new ArrayList<>();
       
       String file=chooser.getSelectedFile().toString().concat(".xls");
     
      
       ExcelExporter exp=new ExcelExporter();
          exp.toExcel(jTable2, new File(file));
         
    }  
   }
  
  



}
